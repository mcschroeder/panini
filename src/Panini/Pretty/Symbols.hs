module Panini.Pretty.Symbols where

import Data.Char
import Data.String
import Panini.Pretty.Doc
import Prelude

-------------------------------------------------------------------------------

orASCII :: Doc -> String -> Doc
orASCII d t = ann (ASCII (fromString t)) d

-------------------------------------------------------------------------------

parens :: Doc -> Doc
parens d = lparen <> d <> rparen

brackets :: Doc -> Doc
brackets d = lbracket <> d <> rbracket

braces :: Doc -> Doc
braces d = lbrace <> d <> rbrace

lparen, rparen :: Doc
lparen = ann (Bracket OpenBra)  "("
rparen = ann (Bracket CloseBra) ")"

lbracket, rbracket :: Doc
lbracket = ann (Bracket OpenBra)  "["
rbracket = ann (Bracket CloseBra) "]"

lbrace, rbrace :: Doc
lbrace = ann (Bracket OpenBra)  "{"
rbrace = ann (Bracket CloseBra) "}"

-------------------------------------------------------------------------------

subscript :: Int -> Doc
subscript i = fromString (map go ds) `orASCII` (fromString ds)
  where
    ds = show i
    go c = if isDigit c then chr (ord c + 8272) else c

superscript :: Int -> Doc
superscript i = fromString (map go ds) `orASCII` (fromString ds)
  where
    ds = show i
    go c = if isDigit c then "‚Å∞¬π¬≤¬≥‚Å¥‚Åµ‚Å∂‚Å∑‚Å∏‚Åπ" !! digitToInt c else c

-------------------------------------------------------------------------------

comma, mid, dot, colon, arrow, mapsTo :: Doc 
comma  = ann Separator ","
mid    = ann Separator "|"
dot    = ann Separator "."
colon  = ann Separator ":"
arrow  = "‚Üí" `orASCII` "->"
mapsTo = "‚Ü¶" `orASCII` "|->"

emptySet, setMinus :: Doc
emptySet = "‚àÖ" `orASCII` "{}"
setMinus = "‚àñ" `orASCII` "\\"

symDivH, symDivH2, symDivV, symDivDiag :: Doc
symDivH    = "‚îÄ" `orASCII` "-"
symDivH2   = "‚ïå" `orASCII` "-"
symDivV    = "‚îÇ" `orASCII` "|"
symDivDiag = "‚ï±" `orASCII` "/"

wedge, vee, symNeg, symImplies, symIff, symAll, symExists :: Doc
wedge      = "‚àß" `orASCII` "/\\"
vee        = "‚à®" `orASCII` "\\/"
symNeg     = "¬¨" `orASCII` "~"
symImplies = "‚áí" `orASCII` "==>"
symIff     = "‚áî" `orASCII` "<==>"
symAll     = "‚àÄ" `orASCII` "forall "
symExists  = "‚àÉ" `orASCII` "exists "

symNe, symEq, symLe, symLt, symGe, symGt, symIn, symNotIn, symNi, symNotNi :: Doc
symNe = "‚â†" `orASCII` "/="
symEq = "="
symLe = "‚â§" `orASCII` "<="
symLt = "<"
symGe = "‚â•" `orASCII` ">="
symGt = ">"
symIn = "‚àà" `orASCII` "\\in"
symNotIn = "‚àâ" `orASCII` "\\notin"
symNi = "‚àã" `orASCII` "\\ni"
symNotNi = "‚àå" `orASCII` "\\notni"

-- NOTE: the symbol for the non-empty intersection relation should correctly be
-- "‚â¨" (U+226C "BETWEEN", LaTeX "\between"), but this renders rather badly in my
-- terminal, so instead we're appropriating "Íòâ" (U+A609, "VAI SYLLABLE NE"), a
-- character from a syllabic writing system for the language spoken by the Vai
-- people of Liberia, which just so happens to look remarkably similar.
symNei, symEi :: Doc
symNei = "Íòâ" `orASCII` "\\nei"
symEi = "‚äò" `orASCII` "\\ei"  -- NOTE: LaTeX "\oslash" NOT "\emptyset"


-- TODO: these replacements could cause massive confusion in string grammars
lambda, kappa, sigma, bigSigma, epsilon :: Doc
lambda = "Œª" `orASCII` "\\"
kappa  = "Œ∫" `orASCII` "k"
sigma  = "œÉ" `orASCII` "s"
bigSigma = "Œ£" `orASCII` "S"
epsilon = "Œµ" `orASCII` "e"

symTUnit, symTBool, symTNat, symTInt, symTChar, symTString :: Doc
symTUnit   = ann (Identifier TypeIdent) $ ann NormalWeight "ùüô" `orASCII` "unit"
symTBool   = ann (Identifier TypeIdent) $ "ùîπ" `orASCII` "bool"
symTNat    = ann (Identifier TypeIdent) $ "‚Ñï" `orASCII` "nat"
symTInt    = ann (Identifier TypeIdent) $ "‚Ñ§" `orASCII` "int"
symTChar   = ann (Identifier TypeIdent) $ "‚ÑÇùïô" `orASCII` "char"
symTString = ann (Identifier TypeIdent) $ "ùïä" `orASCII` "string"

symUnit, symTrue, symFalse :: Doc
symUnit  = ann (Literal OtherLit) "unit"
symTrue  = ann (Literal OtherLit) "true"
symFalse = ann (Literal OtherLit) "false"

symTop, symBot, symInf :: Doc
symTop = "‚ä§" `orASCII` "top"
symBot = "‚ä•" `orASCII` "bot"
symInf = "‚àû" `orASCII` "inf"
