{-# OPTIONS_GHC -Wno-operator-whitespace #-}

{-
This module implements fast regular expression inclusion testing for certain
kinds of expressions.

References:

  * Hovland, Dag. 2012. "The inclusion problem for regular expressions." 
    Journal of Computer and System Sciences 78 (2012): 1795-1813.
    https://doi.org/10.1016/j.jcss.2011.12.003

-}
module Panini.Regex.Inclusion4 (isIncludedBy4) where

import Control.Exception
import Data.Foldable
import Data.Maybe
import Data.Set qualified as Set
import Panini.Regex.CharSet (CharSet)
import Panini.Regex.CharSet qualified as CS
import Panini.Regex.Type
import Prelude
import Panini.Pretty
import Control.Monad.ST
import Data.STRef
import Data.Map.Strict qualified as Map
import Data.Map.Strict (Map)
import Panini.Pretty

import Debug.Trace
--trace _ = id


-------------------------------------------------------------------------------

-- | The set of letters that can occur first in a word in the language, i.e.,
-- first(r) = {l ‚àà Œ£ ‚à£ ‚àÉw: l‚ãÖw ‚àà L(r)} (Hovland 2012, Table 1).
first :: Regex -> CharSet
first = \case
  One             -> mempty
  Lit p           -> p
  Times1 r1 r2 
    | nullable r1 -> first r1 <> first r2
    | otherwise   -> first r1
  Plus1 r1 r2     -> first r1 <> first r2
  Star r          -> first r
  Opt r           -> first r

-------------------------------------------------------------------------------

-- We will use some notational conveniences throughout this module.

(‚àà) :: Eq a => Foldable t => a -> t a -> Bool
(‚àà) = elem

(‚äÜ) :: CharSet -> CharSet -> Bool
(‚äÜ) = CS.isSubsetOf

(‚à™), (‚à©) :: CharSet -> CharSet -> CharSet
(‚à™) = CS.union
(‚à©) = CS.intersection

-- | Is the intersection between two character sets non-empty?
(‚à©?) :: CharSet -> CharSet -> Bool
a ‚à©? b = not $ CS.null $ a ‚à© b
infix 4 ‚à©?

-- | The intersection of a character set and the first-set of a regex.
(‚©Ä) :: CharSet -> Regex -> CharSet
c ‚©Ä r = c `CS.intersection` first r
infix 4 ‚©Ä

-- | Is the first-set of a regex contained in the first-set of another?
(‚ãñ) :: Regex -> Regex -> Bool
r‚ÇÅ ‚ãñ r‚ÇÇ = first r‚ÇÅ ‚äÜ first r‚ÇÇ
infix 4 ‚ãñ

-- | Is the intersection between the first-sets of two regexes non-empty? 
(‚äô) :: Regex -> Regex -> Bool
r‚ÇÅ ‚äô r‚ÇÇ = not $ CS.null $ first r‚ÇÅ `CS.intersection` first r‚ÇÇ
infix 4 ‚äô

ùî´, ùî´Ã∏ :: Regex -> Bool
ùî´ = nullable
ùî´Ã∏ = not . nullable

(‚ãÖ) :: Regex -> Regex -> Regex
(‚ãÖ) = times
infix 5 ‚ãÖ

isLit :: Regex -> Bool
isLit = \case
  Lit _ -> True
  _     -> False

isStar :: Regex -> Bool
isStar = \case
  Star _ -> True
  _      -> False

-- | A special version of the 'Times1' pattern that matches not only r‚ÇÅ‚ãÖr‚ÇÇ
-- (where r‚ÇÇ ‚â† Œµ) but also r‚ÇÅ‚ãÖŒµ (which is normally just r‚ÇÅ) by introducing
-- a spurious empty word. Note that in both cases r‚ÇÅ ‚â† Œµ.
pattern (:‚ãÖ) :: Regex -> Regex -> Regex
pattern r‚ÇÅ :‚ãÖ r‚ÇÇ <- (unconsTimes' -> Just (r‚ÇÅ,r‚ÇÇ))
{-# INLINE (:‚ãÖ) #-}

unconsTimes' :: Regex -> Maybe (Regex, Regex)
unconsTimes' = \case
  Zero         -> Nothing
  One          -> Nothing
  Times1 r‚ÇÅ r‚ÇÇ -> Just (r‚ÇÅ, r‚ÇÇ)
  r            -> Just (r, One)
{-# INLINE unconsTimes' #-}

-- | A special version of the 'Plus1' pattern that matches (r‚ÇÅ + r‚ÇÇ) and also
-- deconstructs optionals r? into choices (r + Œµ).
pattern (:+) :: Regex -> Regex -> Regex
pattern r‚ÇÅ :+ r‚ÇÇ <- (unconsPlus' -> Just (r‚ÇÅ,r‚ÇÇ))
{-# INLINE (:+) #-}

unconsPlus' :: Regex -> Maybe (Regex, Regex)
unconsPlus' = \case
  Plus1 r‚ÇÅ r‚ÇÇ -> Just (r‚ÇÅ, r‚ÇÇ)
  Opt r       -> Just (r, One)
  _           -> Nothing
{-# INLINE unconsPlus' #-}

-- | The '‚äë' type is a reified regular expression inclusion relation.
data a ‚äë b = a :‚äë b 
  deriving stock (Eq, Ord, Show, Read)

infix 0 :‚äë

instance (Pretty a, Pretty b) => Pretty (a ‚äë b) where
  pretty (a :‚äë b) = pretty a <+> "‚äë" <+> pretty b

instance Pretty Bool where
  pretty = pretty . show
-------------------------------------------------------------------------------

-- all premises of any branch

isIncludedBy4 :: Regex -> Regex -> Bool
isIncludedBy4 r‚ÇÅ r‚ÇÇ = go mempty [(mempty,[r‚ÇÅ :‚äë r‚ÇÇ])]
 where
  go f bs = trace (showPretty $ pretty (map snd bs) <\\> "-----") go' f bs
  -- go f bs = go' f bs
  go' _ [] = trace "FALSE" False
  go' _ ((_,[]):bs) = trace "TRUE" True
  go' f ((s,c:cs):bs)
    | c ‚àà s = trace "DROP" go f ((s,cs):bs)
    | c ‚àà f = trace "ELIM" go f bs
    | otherwise = trace "MATCH" $ case match c of
        [] -> go (Set.insert c f) bs
        ps -> go f (map (\p -> (s', p ++ cs)) ps ++ bs) where s' = Set.insert c s


-- trace' s f bs r = trace $ showPretty $
--   "s:" <+> pretty s <\\>
--   "f:" <+> pretty f <\\>
--   "bs:" <+> pretty bs <\\>
--   "-->" <+> pretty r <\\>
--   "------------------------------"

(‚àñ) :: CharSet -> CharSet -> CharSet
a ‚àñ b = a ‚à© (CS.complement b)

match :: (Regex ‚äë Regex) -> [[Regex ‚äë Regex]]
match conclusion@(r·¥∏ :‚äë r·¥ø) = case conclusion of
  -- Axm ----------------------------------------------------------------------
  One :‚äë r 
    | ùî´ r                             -> trace "Axm" [[]]

  -- LitSplit
  Lit l‚ÇÅ :‚ãÖ r‚ÇÉ :‚äë r‚ÇÑ
    | CS.size l‚ÇÅ > 1 -> trace "LitSplit" [map (\c -> (Lit (CS.singleton c))‚ãÖr‚ÇÉ :‚äë r‚ÇÑ) (CS.toList l‚ÇÅ)]

  -- Letter -------------------------------------------------------------------
  Lit l‚ÇÅ :‚ãÖ r‚ÇÅ :‚äë Lit l‚ÇÇ  :‚ãÖ r‚ÇÇ 
    | l‚ÇÅ ‚äÜ l‚ÇÇ                         -> trace "Letter" [[r‚ÇÅ :‚äë r‚ÇÇ]]

  -- LetterStar + ElimCat ----------------------------------------
  Lit l :‚ãÖ r‚ÇÅ :‚äë Star r‚ÇÇ :‚ãÖ r‚ÇÉ
    | letterStar, elimCat -> trace "LetterStar_1 **" [[r·¥∏ :‚äë r‚ÇÇ‚ãÖr·¥ø],[r·¥∏ :‚äë r‚ÇÉ]]
    | letterStar          -> trace "LetterStar_2" [[r·¥∏ :‚äë r‚ÇÇ‚ãÖr·¥ø]]
    | elimCat             -> trace "LetterStar_3" [[r·¥∏ :‚äë r‚ÇÉ]]
   where
    letterStar = l ‚äÜ first r‚ÇÇ
    elimCat    = l ‚äÜ first r‚ÇÉ

  -- -- LetterStar + ElimCat + LeftChoice ----------------------------------------
  -- Lit l :‚ãÖ r‚ÇÅ :‚äë Star r‚ÇÇ :‚ãÖ r‚ÇÉ
  --   | l‚ÇÇ ‚à™ l‚ÇÉ /= l                    -> trace "LetterStar_1" []             -- no match
  --   | l‚ÇÇ ‚à©? l‚ÇÉ                        -> trace "LetterStar_2 **" mkBranch pamb   -- ambiguous
  --   | otherwise                       -> trace "LetterStar_3" [p‚ÇÇ ++ p‚ÇÉ]
  --  where
  --   l‚ÇÇ = l ‚©Ä r‚ÇÇ
  --   l‚ÇÉ = l ‚©Ä r‚ÇÉ
  --   p‚ÇÇ = if CS.null l‚ÇÇ then [] else [(Lit l‚ÇÇ)‚ãÖr‚ÇÅ :‚äë r‚ÇÇ‚ãÖr·¥ø]
  --   p‚ÇÉ = if CS.null l‚ÇÉ then [] else [(Lit l‚ÇÉ)‚ãÖr‚ÇÅ :‚äë r‚ÇÉ] 
  --   la2 = l‚ÇÇ ‚àñ l‚ÇÉ
  --   la3 = l‚ÇÉ ‚àñ l‚ÇÇ
  --   la23 = l‚ÇÇ ‚à© l‚ÇÉ
  --   pamb = [[(Lit la23)‚ãÖr‚ÇÅ :‚äë r‚ÇÇ‚ãÖr·¥ø] ++ pa2 ++ pa3, [(Lit la23)‚ãÖr‚ÇÅ :‚äë r‚ÇÉ] ++ pa2 ++ pa3]
  --   pa2 = if CS.null la2 then [] else [(Lit la2)‚ãÖr‚ÇÅ :‚äë r‚ÇÇ‚ãÖr·¥ø]
  --   pa3 = if CS.null la2 then [] else [(Lit la3)‚ãÖr‚ÇÅ :‚äë r‚ÇÉ]

  -- LetterChoice + ElimCat --------------------------------------
  Lit l :‚ãÖ r‚ÇÅ :‚äë r‚ÇÖ@(r‚ÇÇ :+ r‚ÇÉ) :‚ãÖ r‚ÇÑ
    | letterChoice_2, letterChoice_3, elimCat -> trace "LetterChoice_1 ***" [[r·¥∏ :‚äë r‚ÇÇ‚ãÖr‚ÇÑ],[r·¥∏ :‚äë r‚ÇÉ‚ãÖr‚ÇÑ],[r·¥∏ :‚äë r‚ÇÑ]]
    | letterChoice_2, letterChoice_3          -> trace "LetterChoice_2 **" [[r·¥∏ :‚äë r‚ÇÇ‚ãÖr‚ÇÑ],[r·¥∏ :‚äë r‚ÇÉ‚ãÖr‚ÇÑ]]
    | letterChoice_2, elimCat                 -> trace "LetterChoice_3 **" [[r·¥∏ :‚äë r‚ÇÇ‚ãÖr‚ÇÑ],[r·¥∏ :‚äë r‚ÇÑ]]
    | letterChoice_3, elimCat                 -> trace "LetterChoice_4 **" [[r·¥∏ :‚äë r‚ÇÉ‚ãÖr‚ÇÑ],[r·¥∏ :‚äë r‚ÇÑ]]
    | letterChoice_2                          -> trace "LetterChoice_5" [[r·¥∏ :‚äë r‚ÇÇ‚ãÖr‚ÇÑ]]
    | letterChoice_3                          -> trace "LetterChoice_6" [[r·¥∏ :‚äë r‚ÇÉ‚ãÖr‚ÇÑ]]
    | elimCat                                 -> trace "LetterChoice_7" [[r·¥∏ :‚äë r‚ÇÑ]]
   where
    letterChoice_2 = l ‚äÜ first r‚ÇÇ
    letterChoice_3 = l ‚äÜ first r‚ÇÉ
    elimCat = ùî´ r‚ÇÖ && l ‚äÜ first r‚ÇÑ

  -- -- LetterChoice + ElimCat + LeftChoice --------------------------------------
  -- Lit l :‚ãÖ r‚ÇÅ :‚äë r‚ÇÖ@(r‚ÇÇ :+ r‚ÇÉ) :‚ãÖ r‚ÇÑ
  --   | l‚ÇÇ ‚à™ l‚ÇÉ ‚à™ l‚ÇÑ /= l                 -> trace "LetterChoice_1" []                   -- no match    
  --   | l‚ÇÇ ‚à©? l‚ÇÉ, l‚ÇÇ ‚à©? l‚ÇÑ, l‚ÇÉ ‚à©? l‚ÇÑ -> undefined -- TODO
  --   | l‚ÇÇ ‚à©? l‚ÇÉ, l‚ÇÇ ‚à©? l‚ÇÑ
  --   | l‚ÇÇ ‚à©? l‚ÇÉ, l‚ÇÉ ‚à©? l‚ÇÑ
  --   | l‚ÇÇ ‚à©? l‚ÇÑ, l‚ÇÉ ‚à©? l‚ÇÑ
  --   | l‚ÇÇ ‚à©? l‚ÇÉ -> 
  --   | l‚ÇÇ ‚à©? l‚ÇÑ -> 
  --   | l‚ÇÉ ‚à©? l‚ÇÑ
  --   | otherwise                         -> trace "LetterChoice_3" [p‚ÇÇ ++ p‚ÇÉ ++ p‚ÇÑ]
  --  where
  --   l‚ÇÇ = l ‚©Ä r‚ÇÇ
  --   l‚ÇÉ = l ‚©Ä r‚ÇÉ
  --   l‚ÇÑ = if ùî´ r‚ÇÖ then l ‚©Ä r‚ÇÑ else mempty
  --   p‚ÇÇ = if CS.null l‚ÇÇ then [] else [(Lit l‚ÇÇ)‚ãÖr‚ÇÅ :‚äë r‚ÇÇ‚ãÖr‚ÇÑ]
  --   p‚ÇÉ = if CS.null l‚ÇÉ then [] else [(Lit l‚ÇÉ)‚ãÖr‚ÇÅ :‚äë r‚ÇÉ‚ãÖr‚ÇÑ]
  --   p‚ÇÑ = if CS.null l‚ÇÑ then [] else [(Lit l‚ÇÑ)‚ãÖr‚ÇÅ :‚äë r‚ÇÑ]
  
  -- LeftChoice ---------------------------------------------------------------
  (r‚ÇÅ :+ r‚ÇÇ) :‚ãÖ r‚ÇÉ :‚äë r‚ÇÑ              -> trace "LeftChoice" [[r‚ÇÅ‚ãÖr‚ÇÉ :‚äë r‚ÇÑ, r‚ÇÇ‚ãÖr‚ÇÉ :‚äë r‚ÇÑ]]

  -- LeftStar + ElimCat -------------------------------------------------------
  Star r‚ÇÅ :‚ãÖ r‚ÇÇ :‚äë r‚ÇÉ :‚ãÖ r‚ÇÑ
    -- | leftStar, elimCat, first r·¥∏ ‚à© first r‚ÇÉ /= first r·¥∏ ‚à© first r‚ÇÑ -> []
    | leftStar, elimCat               -> trace "LeftStar_1 **" [[r·¥∏ :‚äë r‚ÇÑ], [r‚ÇÅ‚ãÖr·¥∏ :‚äë r·¥ø, r‚ÇÇ :‚äë r·¥ø]]
    | leftStar                        -> trace "LeftStar_2" [[r‚ÇÅ‚ãÖr·¥∏ :‚äë r·¥ø, r‚ÇÇ :‚äë r·¥ø]]
    | elimCat                         -> trace "LeftStar_3" [[r·¥∏ :‚äë r‚ÇÑ]]
   where
    leftStar = (isLit r‚ÇÉ || isStar r‚ÇÉ) && r·¥∏ ‚äô r‚ÇÉ
    elimCat  = ùî´ r‚ÇÉ && r·¥∏ ‚ãñ r‚ÇÑ

  -- StarChoice1 + StarChoice2 + ElimCat --------------------------------------
  Star r‚ÇÅ :‚ãÖ r‚ÇÇ :‚äë r‚ÇÜ@(r‚ÇÉ :+ r‚ÇÑ) :‚ãÖ r‚ÇÖ
    | amb -> trace "StarChoice_1 ****" mkBranch [p1,p2,p3,p4]
    | sc13                   -> trace "StarChoice_2"  [p2]
    | sc14                   -> trace "StarChoice_3"  [p3]
    | sc2                     -> trace "StarChoice_4"  [p4]
    | ec                      -> trace "StarChoice_5" [p1]
   where
    ec       = ùî´ r‚ÇÜ && r·¥∏ ‚ãñ r‚ÇÖ
    sc13 = r·¥∏ ‚äô r‚ÇÉ && r·¥∏ ‚ãñ r‚ÇÉ‚ãÖr‚ÇÖ && (ùî´Ã∏ r‚ÇÇ || ùî´ r‚ÇÉ)
    sc14 = r·¥∏ ‚äô r‚ÇÑ && r·¥∏ ‚ãñ r‚ÇÑ‚ãÖr‚ÇÖ && (ùî´Ã∏ r‚ÇÇ || ùî´ r‚ÇÑ)
    sc2   = r·¥∏ ‚äô r‚ÇÜ &&
                    ((ùî´Ã∏ r‚ÇÑ && (ùî´ r‚ÇÇ || r·¥∏ ‚äô r‚ÇÉ‚ãÖr‚ÇÖ)) || r·¥∏ ‚äô r‚ÇÉ) &&
                    ((ùî´Ã∏ r‚ÇÉ && (ùî´ r‚ÇÇ || r·¥∏ ‚äô r‚ÇÑ‚ãÖr‚ÇÖ)) || r·¥∏ ‚äô r‚ÇÑ)
    amb = sum (map fromEnum [sc13, sc14, sc2, ec]) > 1 
    p1 = if ec then [r·¥∏ :‚äë r‚ÇÖ] else []
    p2 = if sc13 then [r·¥∏ :‚äë r‚ÇÉ‚ãÖr‚ÇÖ] else []
    p3 = if sc14 then [r·¥∏ :‚äë r‚ÇÑ‚ãÖr‚ÇÖ] else []
    p4 = if sc2 then [r‚ÇÅ‚ãÖr·¥∏ :‚äë r·¥ø, r‚ÇÇ :‚äë r·¥ø] else []

  -----------------------------------------------------------------------------
  _ -> trace "nothing"  assert (not (r·¥∏ ‚ãñ r·¥ø) || (ùî´ r·¥∏ && ùî´Ã∏ r·¥ø) || (r·¥∏ /= One && r·¥ø == One)) []


mkBranch :: [[a]] -> [[a]]
mkBranch = filter (not . null)

